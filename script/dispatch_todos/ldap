#!/usr/bin/ruby 

require "#{File.dirname(__FILE__)}/../../config/environment.rb"
require 'net/ldap'


def connect_to_ldap(options)
	ldap = Net::LDAP.new(options)
end

def is_empty_value?(value)
	(value.class == String and value == "") or not value or (value.class == Array and value.size == 0)
end

def remove_empty_attributes(attributes)
	# empty out 
	attributes.each do |key, value|
		if is_empty_value?(value)
			attributes.delete(key)
		end
	end
end

todo = DispatchTodoInstance.new

ldap = connect_to_ldap(todo.options[:options][:ldap])
if not ldap.bind
	puts "Error: Could not connect to LDAP server: \n#{ldap.get_operation_result.message}" 
	exit 1
end

todo.jobs.each do |job|
	#job = find_user_account(job)
	next if not job # this is not ideal yet, because this job would not succeed. 
	ldap_job = job.to_ldap(todo.options[:options])
	dn = ldap_job[:dn]
	attributes = ldap_job[:attributes]
	# the to_ldap method in the model can overwrite the ldap operation (important in the case of m:n relationships)
	if operation = ldap_job[:options] and ldap_job[:options][:operation]
		job._operation = ldap_job[:options][:operation]
	end
	update_failed = false
	if job._operation == "create"
		remove_empty_attributes(attributes)
		todo.emit_log(job, "inserting object into ldap now! - #{dn}")
		if not ldap.add(:dn => dn, :attributes => attributes)
			todo.emit_log(job, ldap.get_operation_result.message)
			next
		end
	elsif job._operation == "update"
		attributes.each do |key, value|
			todo.emit_log(job, "#{key} | #{value}")
			if key == :objectClass
				next
			end
			if is_empty_value?(value)
				todo.emit_log(job, "deleting #{key}")
				if not ldap.delete_attribute(dn, key)
					todo.emit_log(job, ldap.get_operation_result.message)
				end
			else
				todo.emit_log(job, "updating #{key}/#{value.inspect}")
				if not ldap.replace_attribute(dn, key, value)
					update_failed = true
					todo.emit_log(job, ldap.get_operation_result.message)
				end
			end
		end
	elsif job._operation == "destroy"
		if not ldap.delete :dn => dn
			todo.emit_log(job, ldap.get_operation_result.message)
			update_failed = true
		end	
	else
		todo.emit_log(job, "can't handle #{job._operation} on job-id #{job.id}")
	end
	# do not return sucess! for this job if the update failed somewhere.
	if not update_failed
		todo.success!(job)
	end
end
